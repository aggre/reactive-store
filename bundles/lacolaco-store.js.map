{"version":3,"file":"lacolaco-store.js","sources":["../src/store.ts"],"sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport type Select<T, R> = (state: T) => R;\nexport type Reduce<T> = (state: T) => T;\nexport type StateHandler = (state: any) => any;\nexport type Middleware = (next: StateHandler) => StateHandler;\n\nexport class Store<T> extends BehaviorSubject<T> {\n  private handler: StateHandler;\n\n  constructor(initialState: T, middlewares: Middleware[] = []) {\n    const handler = middlewares.reduceRight(\n      (next: StateHandler, middleware: Middleware) => middleware(next),\n      state => state,\n    );\n    super(handler(initialState));\n    this.handler = handler;\n  }\n\n  // @override\n  next(value: T): void {\n    super.next(this.handler(value));\n  }\n\n  dispatch(fn: Reduce<T>): void {\n    this.next(fn(this.getValue()));\n  }\n\n  select<R>(fn: Select<T, R>): Observable<R> {\n    return this.pipe(map(fn), distinctUntilChanged());\n  }\n}\n"],"names":["BehaviorSubject","[object Object]","initialState","middlewares","handler","reduceRight","next","middleware","state","super","this","value","fn","getValue","pipe","map","distinctUntilChanged"],"mappings":"8FAS8BA,kBAG5BC,YAAYC,EAAiBC,MAC3B,MAAMC,EAAUD,EAAYE,aACzBC,EAAoBC,IAA2BA,EAAWD,GAC3DE,GAASA,GAEXC,MAAML,EAAQF,IACdQ,KAAKN,QAAUA,EAIjBH,KAAKU,GACHF,MAAMH,KAAKI,KAAKN,QAAQO,IAG1BV,SAASW,GACPF,KAAKJ,KAAKM,EAAGF,KAAKG,aAGpBZ,OAAUW,GACR,OAAOF,KAAKI,KAAKC,MAAIH,GAAKI"}